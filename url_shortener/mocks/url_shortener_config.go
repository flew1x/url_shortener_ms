// Code generated by MockGen. DO NOT EDIT.
// Source: internal/config/url_shortener_config.go
//
// Generated by this command:
//
//	mockgen -source=internal/config/url_shortener_config.go -destination=mocks/url_shortener_config.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockIURLConfig is a mock of IURLConfig interface.
type MockIURLConfig struct {
	ctrl     *gomock.Controller
	recorder *MockIURLConfigMockRecorder
}

// MockIURLConfigMockRecorder is the mock recorder for MockIURLConfig.
type MockIURLConfigMockRecorder struct {
	mock *MockIURLConfig
}

// NewMockIURLConfig creates a new mock instance.
func NewMockIURLConfig(ctrl *gomock.Controller) *MockIURLConfig {
	mock := &MockIURLConfig{ctrl: ctrl}
	mock.recorder = &MockIURLConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIURLConfig) EXPECT() *MockIURLConfigMockRecorder {
	return m.recorder
}

// LengthShortURL mocks base method.
func (m *MockIURLConfig) LengthShortURL() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LengthShortURL")
	ret0, _ := ret[0].(int)
	return ret0
}

// LengthShortURL indicates an expected call of LengthShortURL.
func (mr *MockIURLConfigMockRecorder) LengthShortURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LengthShortURL", reflect.TypeOf((*MockIURLConfig)(nil).LengthShortURL))
}

// LiveCaheExpiration mocks base method.
func (m *MockIURLConfig) LiveCaheExpiration() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LiveCaheExpiration")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// LiveCaheExpiration indicates an expected call of LiveCaheExpiration.
func (mr *MockIURLConfigMockRecorder) LiveCaheExpiration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LiveCaheExpiration", reflect.TypeOf((*MockIURLConfig)(nil).LiveCaheExpiration))
}
