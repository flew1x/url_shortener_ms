// Code generated by MockGen. DO NOT EDIT.
// Source: internal/config/url_shortener_config.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockIUrlConfig is a mock of IUrlConfig interface.
type MockIUrlConfig struct {
	ctrl     *gomock.Controller
	recorder *MockIUrlConfigMockRecorder
}

// MockIUrlConfigMockRecorder is the mock recorder for MockIUrlConfig.
type MockIUrlConfigMockRecorder struct {
	mock *MockIUrlConfig
}

// NewMockIUrlConfig creates a new mock instance.
func NewMockIUrlConfig(ctrl *gomock.Controller) *MockIUrlConfig {
	mock := &MockIUrlConfig{ctrl: ctrl}
	mock.recorder = &MockIUrlConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUrlConfig) EXPECT() *MockIUrlConfigMockRecorder {
	return m.recorder
}

// LengthShortURL mocks base method.
func (m *MockIUrlConfig) LengthShortURL() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LengthShortURL")
	ret0, _ := ret[0].(int)
	return ret0
}

// LengthShortURL indicates an expected call of LengthShortURL.
func (mr *MockIUrlConfigMockRecorder) LengthShortURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LengthShortURL", reflect.TypeOf((*MockIUrlConfig)(nil).LengthShortURL))
}

// LiveCaheExpiration mocks base method.
func (m *MockIUrlConfig) LiveCaheExpiration() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LiveCaheExpiration")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// LiveCaheExpiration indicates an expected call of LiveCaheExpiration.
func (mr *MockIUrlConfigMockRecorder) LiveCaheExpiration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LiveCaheExpiration", reflect.TypeOf((*MockIUrlConfig)(nil).LiveCaheExpiration))
}
