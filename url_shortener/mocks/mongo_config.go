// Code generated by MockGen. DO NOT EDIT.
// Source: internal/config/mongo_config.go
//
// Generated by this command:
//
//	mockgen -source=internal/config/mongo_config.go -destination=mocks/mongo_config.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIMongoConfig is a mock of IMongoConfig interface.
type MockIMongoConfig struct {
	ctrl     *gomock.Controller
	recorder *MockIMongoConfigMockRecorder
}

// MockIMongoConfigMockRecorder is the mock recorder for MockIMongoConfig.
type MockIMongoConfigMockRecorder struct {
	mock *MockIMongoConfig
}

// NewMockIMongoConfig creates a new mock instance.
func NewMockIMongoConfig(ctrl *gomock.Controller) *MockIMongoConfig {
	mock := &MockIMongoConfig{ctrl: ctrl}
	mock.recorder = &MockIMongoConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMongoConfig) EXPECT() *MockIMongoConfigMockRecorder {
	return m.recorder
}

// GetMongoDatabase mocks base method.
func (m *MockIMongoConfig) GetMongoDatabase() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMongoDatabase")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMongoDatabase indicates an expected call of GetMongoDatabase.
func (mr *MockIMongoConfigMockRecorder) GetMongoDatabase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMongoDatabase", reflect.TypeOf((*MockIMongoConfig)(nil).GetMongoDatabase))
}

// GetMongoHost mocks base method.
func (m *MockIMongoConfig) GetMongoHost() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMongoHost")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMongoHost indicates an expected call of GetMongoHost.
func (mr *MockIMongoConfigMockRecorder) GetMongoHost() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMongoHost", reflect.TypeOf((*MockIMongoConfig)(nil).GetMongoHost))
}

// GetMongoPassword mocks base method.
func (m *MockIMongoConfig) GetMongoPassword() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMongoPassword")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMongoPassword indicates an expected call of GetMongoPassword.
func (mr *MockIMongoConfigMockRecorder) GetMongoPassword() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMongoPassword", reflect.TypeOf((*MockIMongoConfig)(nil).GetMongoPassword))
}

// GetMongoPort mocks base method.
func (m *MockIMongoConfig) GetMongoPort() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMongoPort")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMongoPort indicates an expected call of GetMongoPort.
func (mr *MockIMongoConfigMockRecorder) GetMongoPort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMongoPort", reflect.TypeOf((*MockIMongoConfig)(nil).GetMongoPort))
}

// GetMongoUsername mocks base method.
func (m *MockIMongoConfig) GetMongoUsername() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMongoUsername")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMongoUsername indicates an expected call of GetMongoUsername.
func (mr *MockIMongoConfigMockRecorder) GetMongoUsername() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMongoUsername", reflect.TypeOf((*MockIMongoConfig)(nil).GetMongoUsername))
}
