// Code generated by MockGen. DO NOT EDIT.
// Source: internal/cache/url_cache.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/flew1x/url_shortener_ms/internal/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockIUrlCache is a mock of IUrlCache interface.
type MockIUrlCache struct {
	ctrl     *gomock.Controller
	recorder *MockIUrlCacheMockRecorder
}

// MockIUrlCacheMockRecorder is the mock recorder for MockIUrlCache.
type MockIUrlCacheMockRecorder struct {
	mock *MockIUrlCache
}

// NewMockIUrlCache creates a new mock instance.
func NewMockIUrlCache(ctrl *gomock.Controller) *MockIUrlCache {
	mock := &MockIUrlCache{ctrl: ctrl}
	mock.recorder = &MockIUrlCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUrlCache) EXPECT() *MockIUrlCacheMockRecorder {
	return m.recorder
}

// GetByLongUrl mocks base method.
func (m *MockIUrlCache) GetByLongUrl(ctx context.Context, longUrl string) (entity.IURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByLongUrl", ctx, longUrl)
	ret0, _ := ret[0].(entity.IURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByLongUrl indicates an expected call of GetByLongUrl.
func (mr *MockIUrlCacheMockRecorder) GetByLongUrl(ctx, longUrl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByLongUrl", reflect.TypeOf((*MockIUrlCache)(nil).GetByLongUrl), ctx, longUrl)
}

// GetByShortUrl mocks base method.
func (m *MockIUrlCache) GetByShortUrl(ctx context.Context, shortUrl string) (entity.IURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByShortUrl", ctx, shortUrl)
	ret0, _ := ret[0].(entity.IURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByShortUrl indicates an expected call of GetByShortUrl.
func (mr *MockIUrlCacheMockRecorder) GetByShortUrl(ctx, shortUrl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByShortUrl", reflect.TypeOf((*MockIUrlCache)(nil).GetByShortUrl), ctx, shortUrl)
}

// SetByLongUrl mocks base method.
func (m *MockIUrlCache) SetByLongUrl(ctx context.Context, url entity.IURL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetByLongUrl", ctx, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetByLongUrl indicates an expected call of SetByLongUrl.
func (mr *MockIUrlCacheMockRecorder) SetByLongUrl(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetByLongUrl", reflect.TypeOf((*MockIUrlCache)(nil).SetByLongUrl), ctx, url)
}

// SetByShortUrl mocks base method.
func (m *MockIUrlCache) SetByShortUrl(ctx context.Context, url entity.IURL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetByShortUrl", ctx, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetByShortUrl indicates an expected call of SetByShortUrl.
func (mr *MockIUrlCacheMockRecorder) SetByShortUrl(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetByShortUrl", reflect.TypeOf((*MockIUrlCache)(nil).SetByShortUrl), ctx, url)
}
